{"version":3,"sources":["components/LandingPage.js","components/AllCities.js","components/SingleCity.js","App.js","serviceWorker.js","index.js"],"names":["StyledBackground","styled","div","_templateObject","StyledMenu","_templateObject2","StyledLink","Link","_templateObject3","LandingPage","react_default","a","createElement","to","Component","AllCities","state","cities","fetchCities","_callee","response","regenerator_default","wrap","_context","prev","next","axios","get","sent","_this","setState","data","stop","this","cityContent","map","city","i","key","concat","id","name","SingleCity","posts","fetchOneCity","abrupt","fetchPosts","_callee2","_context2","cityId","props","match","params","postContent","post","body","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c60cbcb1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst StyledBackground = styled.div`\n  background-image: url(\"http://klxpress.com.my/images/rail.jpg\");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  max-width: 100%;\n`\n\nconst StyledMenu = styled.div`\n  background-color: rgba(0,0,0, 0.6);\n  position: absolute;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  top: 50%;\n  left: 50%;\n  width: 100%;\n  padding: 20px;\n  padding-bottom: 30px;\n  text-align: center;\n  font-size: 4vw;\n  color: white;\n  font-weight: bold;\n\n`\n\n\nconst StyledLink = styled(Link)`\ntext-decoration: none;\ncolor: #f1f1f1;\ncursor: pointer;\nfont-size: 3vw;\n`\n\nexport default class LandingPage extends Component {\n  render() {\n    return (\n      <div>\n      <StyledBackground>\n        </StyledBackground>\n        <StyledMenu>\n        <h1>VAGABOND</h1>\n        <StyledLink to='/cities'>Enter Cities</StyledLink>\n        </StyledMenu>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\n\n\nexport default class AllCities extends Component {\n    state = {\n        cities: []\n    }\n\n    async componentDidMount() {\n        await this.fetchCities()\n    }\n\n    fetchCities = async () => { \n        const response = await axios.get('/api/cities')\n        this.setState({ cities: response.data })\n    }\n\n    render() {\n        const cityContent = this.state.cities.map((city, i) => {\n            return (\n                <div key={i}>\n                    <Link to={`/cities/${city.id}`}>{city.name}</Link>\n                </div>\n            )\n        })\n        return (\n            <div>{cityContent}</div>\n        )\n\n    \n  }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nexport default class SingleCity extends Component {\n    state = {\n        city: {},\n        posts: []\n    }\n\n    async componentDidMount() {\n        const cityId = this.props.match.params.id\n        const city = await this.fetchOneCity(cityId)\n        const posts = await this.fetchPosts(cityId)\n\n        this.setState({ city, posts })\n    }\n\n    fetchOneCity = async (id) => {\n        const response = await axios.get(`/api/cities/${id}`)\n        return response.data\n    }\n\n    fetchPosts = async (id) => {\n        const response = await axios.get(`/api/cities/${id}/posts`)\n        return response.data\n    }\n\n    render() {\n        const city = this.state.city\n        const postContent = this.state.posts.map((post, i) => {\n            return (\n                <div>\n                    <h1>{post.name}</h1>\n                    <p>{post.body}</p>\n                </div>\n            )\n        })\n\n\n\n\n        return (\n        <div>\n            {postContent}\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport LandingPage from './components/LandingPage';\nimport AllCities from './components/AllCities';\nimport SingleCity from './components/SingleCity';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path='/' component={LandingPage} />\n          <Route exact path='/cities' component={AllCities} />\n          <Route exact path='/cities/:id' component={SingleCity} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}